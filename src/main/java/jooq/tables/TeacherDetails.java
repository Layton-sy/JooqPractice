/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.Indexes;
import jooq.Keys;
import jooq.Student;
import jooq.tables.records.TeacherDetailsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeacherDetails extends TableImpl<TeacherDetailsRecord> {

    private static final long serialVersionUID = -106866327;

    /**
     * The reference instance of <code>Student.teacher_details</code>
     */
    public static final TeacherDetails TEACHER_DETAILS = new TeacherDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeacherDetailsRecord> getRecordType() {
        return TeacherDetailsRecord.class;
    }

    /**
     * The column <code>Student.teacher_details.teacher_id</code>.
     */
    public final TableField<TeacherDetailsRecord, Integer> TEACHER_ID = createField(DSL.name("teacher_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Student.teacher_details.address</code>.
     */
    public final TableField<TeacherDetailsRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>Student.teacher_details.salary</code>.
     */
    public final TableField<TeacherDetailsRecord, Integer> SALARY = createField(DSL.name("salary"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>Student.teacher_details</code> table reference
     */
    public TeacherDetails() {
        this(DSL.name("teacher_details"), null);
    }

    /**
     * Create an aliased <code>Student.teacher_details</code> table reference
     */
    public TeacherDetails(String alias) {
        this(DSL.name(alias), TEACHER_DETAILS);
    }

    /**
     * Create an aliased <code>Student.teacher_details</code> table reference
     */
    public TeacherDetails(Name alias) {
        this(alias, TEACHER_DETAILS);
    }

    private TeacherDetails(Name alias, Table<TeacherDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeacherDetails(Name alias, Table<TeacherDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TeacherDetails(Table<O> child, ForeignKey<O, TeacherDetailsRecord> key) {
        super(child, key, TEACHER_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return Student.STUDENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEACHER_DETAILS_PRIMARY);
    }

    @Override
    public Identity<TeacherDetailsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TEACHER_DETAILS;
    }

    @Override
    public UniqueKey<TeacherDetailsRecord> getPrimaryKey() {
        return Keys.KEY_TEACHER_DETAILS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeacherDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<TeacherDetailsRecord>>asList(Keys.KEY_TEACHER_DETAILS_PRIMARY);
    }

    @Override
    public TeacherDetails as(String alias) {
        return new TeacherDetails(DSL.name(alias), this);
    }

    @Override
    public TeacherDetails as(Name alias) {
        return new TeacherDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeacherDetails rename(String name) {
        return new TeacherDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeacherDetails rename(Name name) {
        return new TeacherDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
