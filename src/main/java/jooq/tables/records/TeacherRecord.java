/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import javax.annotation.processing.Generated;

import jooq.tables.Teacher;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeacherRecord extends UpdatableRecordImpl<TeacherRecord> implements Record3<String, Integer, Integer> {

    private static final long serialVersionUID = 1429874943;

    /**
     * Setter for <code>school.teacher.name</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>school.teacher.name</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>school.teacher.age</code>.
     */
    public void setAge(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>school.teacher.age</code>.
     */
    public Integer getAge() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>school.teacher.id</code>.
     */
    public void setId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>school.teacher.id</code>.
     */
    public Integer getId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Teacher.TEACHER.NAME;
    }

    @Override
    public Field<Integer> field2() {
        return Teacher.TEACHER.AGE;
    }

    @Override
    public Field<Integer> field3() {
        return Teacher.TEACHER.ID;
    }

    @Override
    public String component1() {
        return getName();
    }

    @Override
    public Integer component2() {
        return getAge();
    }

    @Override
    public Integer component3() {
        return getId();
    }

    @Override
    public String value1() {
        return getName();
    }

    @Override
    public Integer value2() {
        return getAge();
    }

    @Override
    public Integer value3() {
        return getId();
    }

    @Override
    public TeacherRecord value1(String value) {
        setName(value);
        return this;
    }

    @Override
    public TeacherRecord value2(Integer value) {
        setAge(value);
        return this;
    }

    @Override
    public TeacherRecord value3(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TeacherRecord values(String value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TeacherRecord
     */
    public TeacherRecord() {
        super(Teacher.TEACHER);
    }

    /**
     * Create a detached, initialised TeacherRecord
     */
    public TeacherRecord(String name, Integer age, Integer id) {
        super(Teacher.TEACHER);

        set(0, name);
        set(1, age);
        set(2, id);
    }
}
